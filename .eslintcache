[{"/Users/akc/Code/43-algo-tracker/src/components/app/index.tsx":"1","/Users/akc/Code/43-algo-tracker/src/components/auth/signUp/index.tsx":"2","/Users/akc/Code/43-algo-tracker/src/components/auth/confirmSignUp/index.tsx":"3","/Users/akc/Code/43-algo-tracker/src/components/auth/forgotPasswordSubmit/index.tsx":"4","/Users/akc/Code/43-algo-tracker/src/aws-exports.js":"5","/Users/akc/Code/43-algo-tracker/src/components/home/index.tsx":"6","/Users/akc/Code/43-algo-tracker/src/components/form/index.tsx":"7","/Users/akc/Code/43-algo-tracker/src/index.tsx":"8","/Users/akc/Code/43-algo-tracker/src/components/analytics/index.tsx":"9","/Users/akc/Code/43-algo-tracker/src/components/list/index.tsx":"10","/Users/akc/Code/43-algo-tracker/src/components/list/ListItem.tsx":"11","/Users/akc/Code/43-algo-tracker/src/components/auth/signIn/index.tsx":"12","/Users/akc/Code/43-algo-tracker/src/context/withAlerts.tsx":"13","/Users/akc/Code/43-algo-tracker/src/lib/helpers.ts":"14","/Users/akc/Code/43-algo-tracker/src/reportWebVitals.ts":"15","/Users/akc/Code/43-algo-tracker/src/components/meta/index.tsx":"16","/Users/akc/Code/43-algo-tracker/src/components/auth/copyright/index.tsx":"17","/Users/akc/Code/43-algo-tracker/src/components/auth/forgotPassword/index.tsx":"18"},{"size":4747,"mtime":1609788674578,"results":"19","hashOfConfig":"20"},{"size":4263,"mtime":1609788863214,"results":"21","hashOfConfig":"20"},{"size":3507,"mtime":1609788876897,"results":"22","hashOfConfig":"20"},{"size":3700,"mtime":1609788895233,"results":"23","hashOfConfig":"20"},{"size":692,"mtime":1609806962107,"results":"24","hashOfConfig":"20"},{"size":96,"mtime":1608674103362,"results":"25","hashOfConfig":"20"},{"size":14831,"mtime":1609792589783,"results":"26","hashOfConfig":"20"},{"size":1191,"mtime":1609447228213,"results":"27","hashOfConfig":"20"},{"size":448,"mtime":1609790746868,"results":"28","hashOfConfig":"20"},{"size":2878,"mtime":1609808236109,"results":"29","hashOfConfig":"20"},{"size":8250,"mtime":1609809031436,"results":"30","hashOfConfig":"20"},{"size":4042,"mtime":1609788900598,"results":"31","hashOfConfig":"20"},{"size":1599,"mtime":1608774273683,"results":"32","hashOfConfig":"20"},{"size":128,"mtime":1609779421912,"results":"33","hashOfConfig":"20"},{"size":425,"mtime":1608669228824,"results":"34","hashOfConfig":"20"},{"size":297,"mtime":1609446675549,"results":"35","hashOfConfig":"20"},{"size":438,"mtime":1608775242483,"results":"36","hashOfConfig":"20"},{"size":2878,"mtime":1609788887018,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cdgg3m",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/akc/Code/43-algo-tracker/src/components/app/index.tsx",[],"/Users/akc/Code/43-algo-tracker/src/components/auth/signUp/index.tsx",[],"/Users/akc/Code/43-algo-tracker/src/components/auth/confirmSignUp/index.tsx",[],["81","82"],"/Users/akc/Code/43-algo-tracker/src/components/auth/forgotPasswordSubmit/index.tsx",[],"/Users/akc/Code/43-algo-tracker/src/aws-exports.js",[],"/Users/akc/Code/43-algo-tracker/src/components/home/index.tsx",[],["83","84"],"/Users/akc/Code/43-algo-tracker/src/components/form/index.tsx",["85"],"import React from \"react\";\n\nimport { useForm, Controller } from \"react-hook-form\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersUtilsProvider, DateTimePicker } from \"@material-ui/pickers\";\n\nimport { Difficulty, Algorithm, DataStructure } from \"../../models\";\n\nimport { DataStore } from \"aws-amplify\";\nimport { Problem } from \"../../models\";\nimport { CreateProblemInput } from \"../../API\";\n\nimport { formatChipText } from \"../../lib/helpers\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  paper: {\n    // marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      // marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(4),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    width: \"100%\",\n    gap: theme.spacing(1),\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n  cardGrid: {\n    // paddingTop: theme.spacing(4),\n    // paddingBottom: theme.spacing(10),\n    // padding: theme.spacing(2),\n  },\n  formControl: {\n    // margin: theme.spacing(1),\n    // minWidth: 120,\n    width: \"100%\",\n  },\n  chips: {\n    \"& > *\": {\n      margin: theme.spacing(0.5),\n    },\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n  },\n  // tags: {\n  //   padding: theme.spacing(0, 1),\n  //   // paddingBottom: 0,\n  // },\n}));\n\nconst defaultValues: CreateProblemInput = {\n  title: \"\",\n  url: \"\",\n  difficulty: Difficulty.EASY,\n  duration: \"0\",\n  timestamp: new Date().getTime(),\n  algorithms: [],\n  dataStructures: [],\n  notes: \"\",\n  replUrl: \"\",\n};\n// const defaultValues: CreateProblemInput = {\n//   title: \"\",\n//   url: \"https://leetcode.com/\",\n//   difficulty: Difficulty.EASY,\n//   duration: \"34\",\n//   timestamp: new Date().getTime(),\n//   algorithms: [],\n//   dataStructures: [],\n//   notes: \"\",\n//   replUrl: \"\",\n// };\n\n// const defaultValues: CreateProblemInput = {\n//   title: \"THE ONE WITH THE TAGS\",\n//   url: \"https://leetcode.com/\",\n//   replUrl: \"\",\n//   notes: \"\",\n//   difficulty: Difficulty.EASY,\n//   duration: \"43\",\n//   timestamp: 1609361576984,\n//   // time: \"12:30:24-07:00\",\n//   // date: \"2014-08-18\",\n//   algorithms: [Algorithm.POINTERS, Algorithm.QUICK_SORT],\n//   dataStructures: [DataStructure.ARRAY, DataStructure.QUEUE],\n// };\n\n// const algorithms = [\n//   \"Pointer\",\n//   \"Runner\",\n//   \"Binary Search\",\n//   \"DFS\",\n//   \"BFS\",\n//   \"Quick Sort\",\n//   \"Merge Sort\",\n//   \"Recursion\",\n//   \"DP\",\n//   \"Greedy\",\n// ];\n\n// const dataStructures = [\n//   \"Array\",\n//   \"String\",\n//   \"Linked List\",\n//   \"Stack\",\n//   \"Queue\",\n//   \"Hash Table\",\n//   \"Binary Tree\",\n//   \"Binary Search Tree\",\n//   \"Trie\",\n//   \"Heap\",\n//   \"Graph\",\n// ];\n\nconst algorithms = [\n  Algorithm.DYNAMIC_PROGRAMMING,\n  Algorithm.POINTERS,\n  Algorithm.BINARY_SEARCH,\n  Algorithm.DFS,\n  Algorithm.BFS,\n  Algorithm.QUICK_SORT,\n  Algorithm.MERGE_SORT,\n  Algorithm.RECURSION,\n  Algorithm.GREEDY_METHOD,\n];\n\nconst dataStructures = [\n  DataStructure.ARRAY,\n  DataStructure.BINARY_SEARCH_TREE,\n  DataStructure.BINARY_TREE,\n  DataStructure.GRAPH,\n  DataStructure.HASH_TABLE,\n  DataStructure.HEAP,\n  DataStructure.LINKED_LIST,\n  DataStructure.QUEUE,\n  DataStructure.STACK,\n  DataStructure.STRING,\n  DataStructure.TRIE,\n];\n\ntype Params = {\n  id?: string;\n};\n\nenum Status {\n  NEW,\n  EDIT,\n}\n\nexport default function AddressForm() {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    control,\n  } = useForm<CreateProblemInput>({ defaultValues });\n  const classes = useStyles();\n  const history = useHistory();\n  const params: Params = useParams();\n  const [status, setStatus] = React.useState<Status>(Status.NEW);\n\n  const onSubmit = async (data: CreateProblemInput) => {\n    try {\n      if (status === Status.EDIT) {\n        const id = params?.id;\n\n        if (id) {\n          DataStore.query(Problem, id)\n            .then((original) => {\n              if (!original) throw new Error(\"Problem not found!\");\n\n              const copyOf = Problem.copyOf(original, (draft) => {\n                draft.title = original.title;\n                draft.url = original.url;\n                draft.replUrl = original.replUrl;\n                draft.notes = original.notes;\n                draft.difficulty = original.difficulty;\n                draft.duration = original.duration;\n                draft.timestamp = original.timestamp;\n                draft.algorithms = original.algorithms;\n                draft.dataStructures = original.dataStructures;\n              });\n              console.log(\"copyOf\", copyOf);\n              return DataStore.save(copyOf);\n            })\n            .then((res) => console.log(res))\n            .catch((err) => console.log(\"Error updating problem\", err));\n        }\n        // if (id) {\n        //   const original = await DataStore.query(Problem, id);\n\n        //   if (original) {\n        //     console.log(\"Updating original\");\n        //     await DataStore.save(\n        //       Problem.copyOf(original, (updated) => {\n        //         // console.log(updated);\n        //         // for (let key of Object.keys(original)) {\n        //         //   // @ts-ignore\n        //         //   updated[key] = original[key];\n        //         //   console.log(key);\n        //         // }\n        //         // console.log(updated);\n        //       })\n        //     );\n        //     // return history.push(\"/list\");\n        //   }\n      } else if (status === Status.NEW) {\n        // const problem = new Problem(data);\n        await DataStore.save(new Problem(data));\n        console.log(\"New problem saved.\");\n        history.push(\"/list\");\n      }\n\n      // await DataStore.save(new Problem(data));\n      // history.push(\"/list\");\n\n      // let problem = new Problem(data);\n\n      // if (status === Status.EDIT) {\n      //   const id = params?.id;\n      //   if (id) {\n      //     problem = await DataStore.query(Problem, id);\n      //   }\n      // }\n\n      // const problem = status === Status.NEW\n      //   ? new Problem(data)\n      //   : Post.copyOf(original, (updated) => updated.title = `title ${Date.now()}`)\n\n      // console.log(\"Post saved!\");\n    } catch (err) {\n      console.log(\"Error saving post\", err);\n    }\n  };\n\n  // console.log({ ...watch() });\n\n  React.useEffect(() => {\n    async function loadFormData(params: Params) {\n      const id = params?.id;\n\n      if (id) {\n        console.log(\"loading data\");\n        const data = await DataStore.query(Problem, id);\n        if (data) {\n          reset(data as any);\n          setStatus(Status.EDIT);\n        }\n      }\n    }\n\n    loadFormData(params);\n  }, [params]);\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Container className={classes.cardGrid} maxWidth=\"sm\">\n        <Paper className={classes.paper}>\n          <Typography variant=\"h5\" gutterBottom>\n            New Problem\n          </Typography>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  id=\"title\"\n                  name=\"title\"\n                  label=\"Problem Title\"\n                  fullWidth\n                  inputRef={register}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  id=\"url\"\n                  name=\"url\"\n                  label=\"Problem URL\"\n                  fullWidth\n                  inputRef={register}\n                />\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <FormControl className={classes.formControl} required>\n                  <InputLabel htmlFor=\"difficulty-select\">\n                    Difficulty\n                  </InputLabel>\n                  <Controller\n                    control={control}\n                    name=\"difficulty\"\n                    as={\n                      <Select id=\"difficulty-select\">\n                        <MenuItem value=\"EASY\">Easy</MenuItem>\n                        <MenuItem value=\"MEDIUM\">Medium</MenuItem>\n                        <MenuItem value=\"HARD\">Hard</MenuItem>\n                      </Select>\n                    }\n                  />\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <TextField\n                  required\n                  id=\"duration\"\n                  name=\"duration\"\n                  label=\"Mins to Complete\"\n                  // variant=\"outlined\"\n                  fullWidth\n                  type=\"number\"\n                  inputRef={register}\n                />\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <Controller\n                  name=\"timestamp\"\n                  control={control}\n                  render={({ value, onChange }) => {\n                    return (\n                      <DateTimePicker\n                        label=\"Completed At\"\n                        required\n                        showTodayButton\n                        format=\"yyyy/MM/dd HH:mm\"\n                        value={value}\n                        onChange={(date) => {\n                          onChange(date?.getTime());\n                        }}\n                      />\n                    );\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <InputLabel shrink>Algorithms</InputLabel>\n                <Controller\n                  name=\"algorithms\"\n                  control={control}\n                  render={({ onChange, onBlur, value, name, ref }) => {\n                    return (\n                      <>\n                        <div className={classes.chips}>\n                          {algorithms.map((algo, i) => {\n                            return (\n                              <Chip\n                                key={i}\n                                clickable\n                                label={formatChipText(algo)}\n                                color={\n                                  value.includes(algo) ? \"primary\" : \"default\"\n                                }\n                                onClick={() => {\n                                  const newValue = [...value];\n                                  const idx = newValue.indexOf(algo);\n                                  if (idx === -1) {\n                                    newValue.push(algo);\n                                  } else {\n                                    newValue.splice(idx, 1);\n                                  }\n                                  onChange(newValue);\n                                }}\n                              />\n                            );\n                          })}\n                        </div>\n                      </>\n                    );\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <InputLabel shrink>Data Structures</InputLabel>\n                <Controller\n                  name=\"dataStructures\"\n                  control={control}\n                  render={({ onChange, onBlur, value, name, ref }) => {\n                    return (\n                      <div className={classes.chips}>\n                        {dataStructures.map((ds, i) => {\n                          return (\n                            <Chip\n                              key={i}\n                              clickable\n                              label={formatChipText(ds)}\n                              color={\n                                value.includes(ds) ? \"secondary\" : \"default\"\n                              }\n                              onClick={() => {\n                                const newValue = [...value];\n                                const idx = newValue.indexOf(ds);\n                                if (idx === -1) {\n                                  newValue.push(ds);\n                                } else {\n                                  newValue.splice(idx, 1);\n                                }\n                                onChange(newValue);\n                              }}\n                            />\n                          );\n                        })}\n                      </div>\n                    );\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  id=\"notes\"\n                  name=\"notes\"\n                  label=\"Notes\"\n                  fullWidth\n                  inputRef={register}\n                  multiline\n                  rows={4}\n                  // variant=\"outlined\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  id=\"replUrl\"\n                  name=\"replUrl\"\n                  label=\"REPL URL\"\n                  fullWidth\n                  inputRef={register}\n                  // variant=\"outlined\"\n                />\n              </Grid>\n\n              <Grid item xs={12} className={classes.buttons}>\n                {/* <Button color=\"primary\" variant=\"outlined\" disableElevation>\n                Start\n              </Button> */}\n                <Button onClick={() => history.push(\"/list\")}>Cancel</Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disableElevation\n                  type=\"submit\"\n                >\n                  {status === Status.NEW ? \"Complete\" : \"Update\"}\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </Paper>\n      </Container>\n    </MuiPickersUtilsProvider>\n  );\n}\n","/Users/akc/Code/43-algo-tracker/src/index.tsx",["86","87","88","89"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route, Link, useHistory } from \"react-router-dom\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport {\n  unstable_createMuiStrictModeTheme as createMuiTheme,\n  makeStyles,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport { blueGrey, teal } from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport App from \"./components/app\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"fontsource-roboto\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: blueGrey,\n    secondary: teal,\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <ThemeProvider theme={theme}>\n        <HelmetProvider>\n          <CssBaseline />\n          <App />\n        </HelmetProvider>\n      </ThemeProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/akc/Code/43-algo-tracker/src/components/analytics/index.tsx",[],["90","91"],"/Users/akc/Code/43-algo-tracker/src/components/list/index.tsx",["92"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fab from \"@material-ui/core/Fab\";\n\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { DataStore } from \"aws-amplify\";\nimport { Problem } from \"../../models\";\n\nimport { ListItem } from \"./ListItem\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardGrid: {\n    // paddingTop: theme.spacing(12),\n    paddingBottom: theme.spacing(18),\n    // [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n    //   marginTop: theme.spacing(6),\n    //   marginBottom: theme.spacing(6),\n    //   padding: theme.spacing(3),\n    // },\n  },\n  fab: {\n    bottom: 70,\n    right: 40,\n    margin: 0,\n    top: \"auto\",\n    left: \"auto\",\n    position: \"fixed\",\n  },\n}));\n\nasync function listProblems(\n  setProblems: React.Dispatch<React.SetStateAction<Problem[]>>\n) {\n  try {\n    const problems = await DataStore.query(Problem);\n    setProblems(problems);\n    console.log(\"Queried list of problems:\", problems);\n  } catch (err) {\n    console.log(\"Error retrieving problems\", err);\n  }\n}\n\nasync function changeSync() {\n  await DataStore.clear();\n  await DataStore.start();\n}\n\nconst List: React.FC<{ user: any }> = ({ user }) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const [problems, setProblems] = React.useState<Problem[]>([]);\n\n  React.useEffect(() => {\n    listProblems(setProblems);\n\n    const subscription = DataStore.observe(Problem).subscribe((msg) => {\n      console.log(msg.model, msg.opType, msg.element);\n      listProblems(setProblems);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n  // React.useEffect(() => {\n  //   const subscription = DataStore.observe(Problem).subscribe((msg) => {\n  //     console.log(msg.model, msg.opType, msg.element);\n  //   });\n\n  //   return () => subscription.unsubscribe();\n  // }, []);\n\n  // React.useEffect(() => {\n  //   async function getProblems() {\n  //     try {\n  //       const theItems = await DataStore.query(Problem);\n  //       setProblems(theItems);\n  //       console.log(\"Posts retrieved successfully.\", theItems);\n  //     } catch (err) {\n  //       console.log(\"Error retrieving problems\", err);\n  //     }\n  //   }\n\n  //   getProblems();\n  // }, []);\n\n  return (\n    <Container className={classes.cardGrid} maxWidth=\"md\">\n      <Grid container spacing={4}>\n        {problems.map((data) => {\n          return <ListItem data={data} key={data.id} user={user} />;\n        })}\n      </Grid>\n      {user && (\n        <Fab\n          color=\"secondary\"\n          aria-label=\"add\"\n          className={classes.fab}\n          onClick={() => history.push(\"/form\")}\n        >\n          <AddIcon />\n        </Fab>\n      )}\n    </Container>\n  );\n};\n\nexport default List;\n","/Users/akc/Code/43-algo-tracker/src/components/list/ListItem.tsx",[],"/Users/akc/Code/43-algo-tracker/src/components/auth/signIn/index.tsx",[],"/Users/akc/Code/43-algo-tracker/src/context/withAlerts.tsx",[],"/Users/akc/Code/43-algo-tracker/src/lib/helpers.ts",[],"/Users/akc/Code/43-algo-tracker/src/reportWebVitals.ts",[],["93","94"],"/Users/akc/Code/43-algo-tracker/src/components/meta/index.tsx",[],"/Users/akc/Code/43-algo-tracker/src/components/auth/copyright/index.tsx",[],"/Users/akc/Code/43-algo-tracker/src/components/auth/forgotPassword/index.tsx",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"95","replacedBy":"99"},{"ruleId":"97","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":292,"column":6,"nodeType":"103","endLine":292,"endColumn":14,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":3,"column":25,"nodeType":"107","messageId":"108","endLine":3,"endColumn":30},{"ruleId":"105","severity":1,"message":"109","line":3,"column":32,"nodeType":"107","messageId":"108","endLine":3,"endColumn":36},{"ruleId":"105","severity":1,"message":"110","line":3,"column":38,"nodeType":"107","messageId":"108","endLine":3,"endColumn":48},{"ruleId":"105","severity":1,"message":"111","line":7,"column":3,"nodeType":"107","messageId":"108","endLine":7,"endColumn":13},{"ruleId":"95","replacedBy":"112"},{"ruleId":"97","replacedBy":"113"},{"ruleId":"105","severity":1,"message":"114","line":48,"column":16,"nodeType":"107","messageId":"108","endLine":48,"endColumn":26},{"ruleId":"95","replacedBy":"115"},{"ruleId":"97","replacedBy":"116"},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],["117"],["118"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'reset'. Either include it or remove the dependency array.","ArrayExpression",["119"],"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'useHistory' is defined but never used.","'makeStyles' is defined but never used.",["117"],["118"],"'changeSync' is defined but never used.",["117"],["118"],"no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},"Update the dependencies array to be: [params, reset]",{"range":"122","text":"123"},[7695,7703],"[params, reset]"]